该程序目前属于丢弃状态，已经不打算更新，采用旧版PO框架，也已经要坑了。
目前正在开发新版。


该程序目前主要功能：

长数据发送。
延时，循环功能。
协议自动装载。

输入方式：
一般都是在某个按钮上点击，然后在下方出来一个小黑屏，这时就可以输出命令了。完毕后按回车或者鼠标左键就可以运行了。

所有的命令都是全部直接输入到一个字符串终端里面的，终端支持的命令有：

open [串口名，只支持com1~com9，小写必须] [波特率，可省略，默认为9600]
	以指定波特率打开某个串口，例如说 open com7 57600 就是以波特率57600打开串口7。

write [数据]/[命令] .....
	传输数据，例如说write &abcdef;就是将字符串abcdef传输，write %ef,01,20,23;就是按16进制发送那几个数据。可以混合使用，例如说write &abcdef; %ef,01,20,23;就能够一起发送。另外还有数据集与控制指令的分别，如果是全字符的话那就是发送数据集，而如果是在字符前有个-号的话就是控制指令。
	支持的控制指令有暂停和循环。其中-w XX表示等待XX毫秒，-dl表示死循环，-lf XX表示循环执行XX次。
	例如说write aa -w 100 -lf 5 -dl就表示发送数据集aa，等待100毫秒，一共循环5次，在循环完毕后再重新执行。

close [目标]
	关闭某个目标的功能，其接受的参数有两个，serial和channel。前者表示串口，后者表示命令队列。close Serial表示关闭串口，而close channel表示清楚所有命令队列，其是针对发送数据中的死循环来说的。

load [脚本地址]
	读取位于目标地址的一个脚本文件，从中提取数据集，协议格式，和命令。

===========脚本格式============
*Protocol { 123,*,*10,* ~,SIZE } -Go
表示定义一个名字为Go的协议，内容是静态数据123(十进制)，*任意单个数据，*10任意10个数据，* ~任意长度数据。SIZE当前总数据长度。
例如说定义了一个*Protocol {111,*,SIZE,* ~,233} -Uo，在激活了这个协议模板后，发送'a','b','c'三个字符，就能生成[111,'a',5,'b','c',233]一个串的数据。另外，里面的数字只支持十进制。

*Data {123,5,21,23} -Go
表示定义一个名字为Go的数据集，内容是静态数据123(十进制)。。。。。
载入脚本后，如果使用了write Go就会直接发送那4个数据。

*Comment [write &acdef;] -Go
表示定义一个名字为Go的命令，内容是write &acdef;
===============================

run [命令名]
	直接将脚本中Comment中定义的命令输入到串口终端中。注意会有无限递归。

setprotocol [协议名] 
	设置当前协议。设置完协议后会对以后所有的发送命令造成影响。
showprotocol 
	查看当前协议。
cleanprotocol 
	取消使用协议。

×××××××××××××××××××××××××××××××××××××××××××××××××××××××
关于界面。
做上角是对open命令和close命令的封装。
当左键点击打开串口的时候，会跑出一个黑色的输入框，里面输入串口号和波特率，按回车后，如果能够成功打开，按键会变蓝。
对按键点击右键后就能关闭串口。

蓝色条子是数据栏，在填写完毕后，点击发送，就会自动在数据栏的数据前添加write并自动发送到串口终端。如果对发送按钮点击右键，则会自动执行close channel操作。


 
